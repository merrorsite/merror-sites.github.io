{"mappings":"uIAMA,SAASA,mBAWP,MAAMC,eAAUC,EAAMC,cAA4B,IAI5CC,eAAiBF,EAAMG,YAAyC,CAACC,EAAOC,KAC5E,MAAMC,SAAEA,GAAaF,EACfG,EAAMP,EAAMQ,OAA0B,MACtCC,EAAeC,EAAgBL,EAAcE,GAC7CI,EAAUX,EAAMQ,OAAgC,IAAII,KAAOC,qBACjE,OACEC,EAAAC,cAAChB,EAAQiB,SAAT,CAAkBC,MAAOjB,EAAMkB,SAAQ,KAAA,CAASP,QAAAA,EAASQ,cAAeZ,KAAQ,CAACI,kBAC/EG,EAAAC,cAACK,EAAD,CAAMb,IAAKE,GAAeH,OAY1Be,EAAiB,6BAIjBC,eAAqBtB,EAAMG,YAC/B,CAACC,EAAOC,KACN,MAAMC,SAAEA,KAAaiB,GAAanB,EAC5BG,EAAMP,EAAMQ,OAAoB,MAChCC,EAAeC,EAAgBL,EAAcE,GAC7CiB,EAAUxB,EAAMyB,WAAW1B,GAOjC,OALAC,EAAM0B,WAAU,KACdF,EAAQb,QAAQgB,IAAIpB,EAAK,CAAEA,IAAAA,KAAUgB,IAC9B,KAAWC,EAAQb,QAAQiB,OAAOrB,oBAIzCO,EAAAC,cAACK,EAAD,CAAYS,CAACR,GAAiB,GAAMd,IAAKE,GACtCH,MA4BT,MAAO,CAACJ,EAAgBoB,EAhBxB,WACE,MAAME,EAAUxB,EAAMyB,WAAW1B,GACjC,MAAO,CACL+B,WACE,MAAMC,EAAeC,MAAMC,KACzBT,EAAQL,cAAcN,QAASqB,iBAAkB,IAAGb,OAMtD,OAJcW,MAAMC,KAAKT,EAAQb,QAAQwB,UACdC,MACzB,CAACC,EAAGC,IAAMP,EAAaQ,QAAQF,EAAE9B,IAAIM,SAAYkB,EAAaQ,QAAQD,EAAE/B,IAAIM","sources":["./packages/react/collection/src/Collection.tsx"],"sourcesContent":["import React from 'react';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { Slot } from '@radix-ui/react-slot';\n\ntype SlotProps = React.ComponentProps<typeof Slot>;\n\nfunction createCollection<ItemElement extends HTMLElement, ItemData>() {\n  /* -----------------------------------------------------------------------------------------------\n   * Collection\n   * ---------------------------------------------------------------------------------------------*/\n\n  type CollectionElement = HTMLElement;\n\n  type ContextValue = {\n    collectionRef: React.RefObject<CollectionElement>;\n    itemMap: Map<React.RefObject<ItemElement>, { ref: React.RefObject<ItemElement> } & ItemData>;\n  };\n  const Context = React.createContext<ContextValue>({} as any);\n\n  const COLLECTION_SLOT_NAME = 'CollectionSlot';\n\n  const CollectionSlot = React.forwardRef<CollectionElement, SlotProps>((props, forwardedRef) => {\n    const { children } = props;\n    const ref = React.useRef<CollectionElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const itemMap = React.useRef<ContextValue['itemMap']>(new Map()).current;\n    return (\n      <Context.Provider value={React.useMemo(() => ({ itemMap, collectionRef: ref }), [itemMap])}>\n        <Slot ref={composedRefs}>{children}</Slot>\n      </Context.Provider>\n    );\n  });\n\n  CollectionSlot.displayName = COLLECTION_SLOT_NAME;\n\n  /* -----------------------------------------------------------------------------------------------\n   * CollectionItem\n   * ---------------------------------------------------------------------------------------------*/\n\n  const ITEM_SLOT_NAME = 'CollectionItemSlot';\n  const ITEM_DATA_ATTR = 'data-radix-collection-item';\n\n  type CollectionItemSlotProps = { children: React.ReactNode } & ItemData;\n\n  const CollectionItemSlot = React.forwardRef<ItemElement, CollectionItemSlotProps>(\n    (props, forwardedRef) => {\n      const { children, ...itemData } = props;\n      const ref = React.useRef<ItemElement>(null);\n      const composedRefs = useComposedRefs(forwardedRef, ref);\n      const context = React.useContext(Context);\n\n      React.useEffect(() => {\n        context.itemMap.set(ref, { ref, ...((itemData as unknown) as ItemData) });\n        return () => void context.itemMap.delete(ref);\n      });\n\n      return (\n        <Slot {...{ [ITEM_DATA_ATTR]: '' }} ref={composedRefs}>\n          {children}\n        </Slot>\n      );\n    }\n  );\n\n  CollectionItemSlot.displayName = ITEM_SLOT_NAME;\n\n  /* -----------------------------------------------------------------------------------------------\n   * useCollection\n   * ---------------------------------------------------------------------------------------------*/\n\n  function useCollection() {\n    const context = React.useContext(Context);\n    return {\n      getItems() {\n        const orderedNodes = Array.from(\n          context.collectionRef.current!.querySelectorAll(`[${ITEM_DATA_ATTR}]`)\n        );\n        const items = Array.from(context.itemMap.values());\n        const orderedItems = items.sort(\n          (a, b) => orderedNodes.indexOf(a.ref.current!) - orderedNodes.indexOf(b.ref.current!)\n        );\n        return orderedItems;\n      },\n    };\n  }\n\n  return [CollectionSlot, CollectionItemSlot, useCollection] as const;\n}\n\nexport { createCollection };\n"],"names":["createCollection","Context","React","createContext","CollectionSlot","forwardRef","props","forwardedRef","children","ref","useRef","composedRefs","useComposedRefs","itemMap","Map","current","_react","createElement","Provider","value","useMemo","collectionRef","Slot","ITEM_DATA_ATTR","CollectionItemSlot","itemData","context","useContext","useEffect","set","delete","[object Object]","getItems","orderedNodes","Array","from","querySelectorAll","values","sort","a","b","indexOf"],"version":3,"file":"index.module.js.map"}