{"mappings":"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","sources":["./packages/react/dismissable-layer/src/DismissableLayer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useBodyPointerEvents } from '@radix-ui/react-use-body-pointer-events';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useEscapeKeydown } from '@radix-ui/react-use-escape-keydown';\n\n// We need to compute the total count of layers AND a running count of all layers\n// in order to find which layer is the deepest one.\n// This is use to only dismiss the deepest layer when using the escape key\n// because we bind the key listener to document so cannot take advantage of event.stopPropagation()\nconst [TotalLayerCountProvider, useTotalLayerCount] = createTotalLayerCount();\nconst [RunningLayerCountProvider, usePreviousRunningLayerCount] = createRunningLayerCount();\n\n// We need to compute the total count of layers which set `disableOutsidePointerEvents` to `true` AND\n// a running count of all the layers which set `disableOutsidePointerEvents` to `true` in order to determine\n// which layers should be dismissed when interacting outside.\n// (ie. all layers that do not have a child layer which sets `disableOutsidePointerEvents` to `true`)\nconst [\n  TotalLayerCountWithDisabledOutsidePointerEventsProvider,\n  useTotalLayerCountWithDisabledOutsidePointerEvents,\n] = createTotalLayerCount('TotalLayerCountWithDisabledOutsidePointerEventsProvider');\nconst [\n  RunningLayerCountWithDisabledOutsidePointerEventsProvider,\n  usePreviousRunningLayerCountWithDisabledOutsidePointerEvents,\n] = createRunningLayerCount('RunningLayerCountWithDisabledOutsidePointerEventsProvider');\n\n/* -------------------------------------------------------------------------------------------------\n * DismissableLayer\n * -----------------------------------------------------------------------------------------------*/\n\ntype DismissableLayerProps = {\n  children: (\n    args: ReturnType<typeof usePointerDownOutside> &\n      ReturnType<typeof useFocusOutside> & {\n        style: React.CSSProperties;\n      }\n  ) => React.ReactElement;\n\n  /**\n   * When `true`, hover/focus/click interactions will be disabled on elements outside the `DismissableLayer`.\n   * Users will need to click twice on outside elements to interact with them:\n   * Once to close the `DismissableLayer`, and again to trigger the element.\n   */\n  disableOutsidePointerEvents?: boolean;\n\n  /**\n   * Event handler called when the escape key is down.\n   * Can be prevented.\n   */\n  onEscapeKeyDown?: (event: KeyboardEvent) => void;\n\n  /**\n   * Event handler called when the a pointer event happens outside of the `DismissableLayer`.\n   * Can be prevented.\n   */\n  onPointerDownOutside?: (event: MouseEvent | TouchEvent) => void;\n\n  /**\n   * Event handler called when the focus moves outside of the `DismissableLayer`.\n   * Can be prevented.\n   */\n  onFocusOutside?: (event: React.FocusEvent) => void;\n\n  /**\n   * Event handler called when an interaction happens outside the `DismissableLayer`.\n   * Specifically, when a pointer event happens outside of the `DismissableLayer` or focus moves outside of it.\n   * Can be prevented.\n   */\n  onInteractOutside?: (event: MouseEvent | TouchEvent | React.FocusEvent) => void;\n\n  /** Callback called when the `DismissableLayer` should be dismissed */\n  onDismiss?: () => void;\n};\n\nfunction DismissableLayer(props: DismissableLayerProps) {\n  const runningLayerCount = usePreviousRunningLayerCount();\n  const isRootLayer = runningLayerCount === 0;\n  const layer = <DismissableLayerImpl {...props} />;\n\n  // if it's the root layer, we wrap it with our necessary root providers\n  // (effectively we wrap the whole tree of nested layers)\n  return isRootLayer ? (\n    <TotalLayerCountProvider>\n      <TotalLayerCountWithDisabledOutsidePointerEventsProvider>\n        {layer}\n      </TotalLayerCountWithDisabledOutsidePointerEventsProvider>\n    </TotalLayerCountProvider>\n  ) : (\n    layer\n  );\n}\n\nfunction DismissableLayerImpl(props: React.ComponentProps<typeof DismissableLayer>) {\n  const {\n    children,\n    disableOutsidePointerEvents = false,\n    onEscapeKeyDown,\n    onPointerDownOutside,\n    onFocusOutside,\n    onInteractOutside,\n    onDismiss,\n  } = props;\n\n  const totalLayerCount = useTotalLayerCount();\n  const prevRunningLayerCount = usePreviousRunningLayerCount();\n  const runningLayerCount = prevRunningLayerCount + 1;\n  const isDeepestLayer = runningLayerCount === totalLayerCount;\n\n  const totalLayerCountWithDisabledOutsidePointerEvents = useTotalLayerCountWithDisabledOutsidePointerEvents(\n    disableOutsidePointerEvents\n  );\n  const prevRunningLayerCountWithDisabledOutsidePointerEvents = usePreviousRunningLayerCountWithDisabledOutsidePointerEvents();\n  const runningLayerCountWithDisabledOutsidePointerEvents =\n    prevRunningLayerCountWithDisabledOutsidePointerEvents + (disableOutsidePointerEvents ? 1 : 0);\n  const containsChildLayerWithDisabledOutsidePointerEvents =\n    runningLayerCountWithDisabledOutsidePointerEvents <\n    totalLayerCountWithDisabledOutsidePointerEvents;\n\n  // Disable pointer-events on `document.body` when at least one layer is disabling outside pointer events\n  useBodyPointerEvents({ disabled: disableOutsidePointerEvents });\n\n  // Dismiss on escape\n  useEscapeKeydown((event) => {\n    // Only dismiss if it's the deepest layer. his is effectively mimicking\n    // event.stopPropagation from the layer with disabled outside pointer events.\n    if (isDeepestLayer) {\n      onEscapeKeyDown?.(event);\n      if (!event.defaultPrevented) {\n        onDismiss?.();\n      }\n    }\n  });\n\n  // Dismiss on pointer down outside\n  const pointerDownOutside = usePointerDownOutside((event) => {\n    // Only dismiss if there's no deeper layer which disabled pointer events outside itself\n    if (!containsChildLayerWithDisabledOutsidePointerEvents) {\n      onPointerDownOutside?.(event);\n      onInteractOutside?.(event);\n      if (!event.defaultPrevented) {\n        onDismiss?.();\n      }\n    }\n  });\n\n  // Dismiss on focus outside\n  const focusOutside = useFocusOutside((event) => {\n    onFocusOutside?.(event);\n    onInteractOutside?.(event);\n    if (!event.defaultPrevented) {\n      onDismiss?.();\n    }\n  });\n\n  // If we have disabled pointer events on body, we need to reset `pointerEvents: 'auto'`\n  // on some layers. This depends on which layers set `disableOutsidePointerEvents` to `true`.\n  //\n  // NOTE: it's important we set it on ALL layers that need it as we cannot simply\n  // set it on the deepest layer which sets `disableOutsidePointerEvents` to `true` and rely\n  // on inheritence. This is because layers may be rendered in different portals where\n  // inheritence wouldn't apply, so we need to set it explicity on its children too.\n  const isBodyPointerEventsDisabled = totalLayerCountWithDisabledOutsidePointerEvents > 0;\n  const shouldReEnablePointerEvents =\n    isBodyPointerEventsDisabled && !containsChildLayerWithDisabledOutsidePointerEvents;\n\n  return (\n    <RunningLayerCountProvider runningCount={runningLayerCount}>\n      <RunningLayerCountWithDisabledOutsidePointerEventsProvider\n        runningCount={runningLayerCountWithDisabledOutsidePointerEvents}\n      >\n        {children({\n          style: shouldReEnablePointerEvents ? { pointerEvents: 'auto' } : {},\n          ...pointerDownOutside,\n          ...focusOutside,\n        })}\n      </RunningLayerCountWithDisabledOutsidePointerEventsProvider>\n    </RunningLayerCountProvider>\n  );\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Utility hooks\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * Sets up mousedown/touchstart listeners which listens for pointer down events outside a react subtree.\n *\n * We use `mousedown` rather than click` for 2 reasons:\n * - to mimic layer dismissing behaviour present in OS which usually happens on mousedown\n * - to enable to us call `event.preventDefault()` and prevent focus from happening.\n *\n * Returns props to pass to the node we want to check for outside events.\n */\nfunction usePointerDownOutside(\n  onPointerDownOutsideProp?: (event: MouseEvent | TouchEvent) => void\n) {\n  const onPointerDownOutside = useCallbackRef(onPointerDownOutsideProp);\n  const isEventInside = React.useRef(false);\n\n  React.useEffect(() => {\n    const handlePointerDown = (event: MouseEvent | TouchEvent) => {\n      if (!isEventInside.current) {\n        onPointerDownOutside(event);\n      }\n      isEventInside.current = false;\n    };\n\n    document.addEventListener('mousedown', handlePointerDown);\n    document.addEventListener('touchstart', handlePointerDown);\n\n    return () => {\n      document.removeEventListener('mousedown', handlePointerDown);\n      document.removeEventListener('touchstart', handlePointerDown);\n    };\n  }, [onPointerDownOutside]);\n\n  const markEventAsInside = () => {\n    isEventInside.current = true;\n  };\n\n  return {\n    // ensures we check React component tree (not just DOM tree)\n    onMouseDownCapture: markEventAsInside as React.MouseEventHandler,\n    onTouchStartCapture: markEventAsInside as React.TouchEventHandler,\n  };\n}\n\n/**\n * Listens for when focus moves outside a react subtree.\n * Returns props to pass to the root (node) of the subtree we want to check.\n */\nfunction useFocusOutside(onFocusOutside?: (event: React.FocusEvent) => void) {\n  const timerRef = React.useRef<number>(0);\n\n  // Cleanup timer if an unmount occurs before onFocusCapture fires\n  React.useEffect(() => {\n    return () => window.clearTimeout(timerRef.current);\n  }, []);\n\n  return {\n    onBlurCapture: (event: React.FocusEvent) => {\n      event.persist();\n      timerRef.current = window.setTimeout(() => {\n        onFocusOutside?.(event);\n      }, 0);\n    },\n    onFocusCapture: () => {\n      window.clearTimeout(timerRef.current);\n    },\n  };\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Layer counting utilities\n * -----------------------------------------------------------------------------------------------*/\n\nfunction createTotalLayerCount(displayName?: string) {\n  const TotalLayerCountContext = React.createContext<{\n    total: number;\n    setTotal: React.Dispatch<React.SetStateAction<number>>;\n  }>({ total: 0, setTotal: () => {} });\n\n  const TotalLayerCountProvider: React.FC = ({ children }) => {\n    const [total, setTotal] = React.useState(0);\n    const context = React.useMemo(() => ({ total, setTotal }), [total, setTotal]);\n    return (\n      <TotalLayerCountContext.Provider value={context}>{children}</TotalLayerCountContext.Provider>\n    );\n  };\n  if (displayName) {\n    TotalLayerCountProvider.displayName = displayName;\n  }\n\n  function useTotalLayerCount(counted = true) {\n    const { total, setTotal } = React.useContext(TotalLayerCountContext);\n\n    React.useLayoutEffect(() => {\n      if (counted) {\n        setTotal((n) => n + 1);\n        return () => setTotal((n) => n - 1);\n      }\n    }, [counted, setTotal]);\n\n    return total;\n  }\n\n  return [TotalLayerCountProvider, useTotalLayerCount] as const;\n}\n\nfunction createRunningLayerCount(displayName?: string) {\n  const RunningLayerCountContext = React.createContext(0);\n\n  const RunningLayerCountProvider: React.FC<{ runningCount: number }> = (props) => {\n    const { children, runningCount } = props;\n    return (\n      <RunningLayerCountContext.Provider value={runningCount}>\n        {children}\n      </RunningLayerCountContext.Provider>\n    );\n  };\n  if (displayName) {\n    RunningLayerCountProvider.displayName = displayName;\n  }\n\n  function usePreviousRunningLayerCount() {\n    return React.useContext(RunningLayerCountContext) || 0;\n  }\n\n  return [RunningLayerCountProvider, usePreviousRunningLayerCount] as const;\n}\n\nconst Root = DismissableLayer;\n\nexport {\n  DismissableLayer,\n  //\n  Root,\n};\n"],"names":["TotalLayerCountProvider","useTotalLayerCount","createTotalLayerCount","RunningLayerCountProvider","usePreviousRunningLayerCount","createRunningLayerCount","TotalLayerCountWithDisabledOutsidePointerEventsProvider","useTotalLayerCountWithDisabledOutsidePointerEvents","RunningLayerCountWithDisabledOutsidePointerEventsProvider","usePreviousRunningLayerCountWithDisabledOutsidePointerEvents","DismissableLayer","props","isRootLayer","layer","_react","createElement","$b3ca5e0c42ec5d7395c8cb24157$var$DismissableLayerImpl","$b3ca5e0c42ec5d7395c8cb24157$var$TotalLayerCountProvider","$b3ca5e0c42ec5d7395c8cb24157$var$TotalLayerCountWithDisabledOutsidePointerEventsProvider","DismissableLayerImpl","children","disableOutsidePointerEvents","onEscapeKeyDown","onPointerDownOutside","onFocusOutside","onInteractOutside","onDismiss","totalLayerCount","runningLayerCount","isDeepestLayer","totalLayerCountWithDisabledOutsidePointerEvents","runningLayerCountWithDisabledOutsidePointerEvents","containsChildLayerWithDisabledOutsidePointerEvents","useBodyPointerEvents","disabled","useEscapeKeydown","event","defaultPrevented","pointerDownOutside","onPointerDownOutsideProp","useCallbackRef","isEventInside","React","useRef","useEffect","handlePointerDown","current","document","addEventListener","removeEventListener","markEventAsInside","onMouseDownCapture","onTouchStartCapture","usePointerDownOutside","focusOutside","timerRef","window","clearTimeout","onBlurCapture","persist","setTimeout","onFocusCapture","useFocusOutside","shouldReEnablePointerEvents","$b3ca5e0c42ec5d7395c8cb24157$var$RunningLayerCountProvider","runningCount","$b3ca5e0c42ec5d7395c8cb24157$var$RunningLayerCountWithDisabledOutsidePointerEventsProvider","style","pointerEvents","displayName","TotalLayerCountContext","createContext","total","setTotal","useState","context","useMemo","Provider","value","counted","useContext","useLayoutEffect","n","RunningLayerCountContext","Root"],"version":3,"file":"index.module.js.map"}