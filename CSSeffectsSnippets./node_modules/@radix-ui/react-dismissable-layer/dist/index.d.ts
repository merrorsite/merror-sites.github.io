import * as React from "react";
type DismissableLayerProps = {
    children: (args: ReturnType<typeof usePointerDownOutside> & ReturnType<typeof useFocusOutside> & {
        style: React.CSSProperties;
    }) => React.ReactElement;
    /**
     * When `true`, hover/focus/click interactions will be disabled on elements outside the `DismissableLayer`.
     * Users will need to click twice on outside elements to interact with them:
     * Once to close the `DismissableLayer`, and again to trigger the element.
     */
    disableOutsidePointerEvents?: boolean;
    /**
     * Event handler called when the escape key is down.
     * Can be prevented.
     */
    onEscapeKeyDown?: (event: KeyboardEvent) => void;
    /**
     * Event handler called when the a pointer event happens outside of the `DismissableLayer`.
     * Can be prevented.
     */
    onPointerDownOutside?: (event: MouseEvent | TouchEvent) => void;
    /**
     * Event handler called when the focus moves outside of the `DismissableLayer`.
     * Can be prevented.
     */
    onFocusOutside?: (event: React.FocusEvent) => void;
    /**
     * Event handler called when an interaction happens outside the `DismissableLayer`.
     * Specifically, when a pointer event happens outside of the `DismissableLayer` or focus moves outside of it.
     * Can be prevented.
     */
    onInteractOutside?: (event: MouseEvent | TouchEvent | React.FocusEvent) => void;
    /** Callback called when the `DismissableLayer` should be dismissed */
    onDismiss?: () => void;
};
export function DismissableLayer(props: DismissableLayerProps): JSX.Element;
/**
 * Sets up mousedown/touchstart listeners which listens for pointer down events outside a react subtree.
 *
 * We use `mousedown` rather than click` for 2 reasons:
 * - to mimic layer dismissing behaviour present in OS which usually happens on mousedown
 * - to enable to us call `event.preventDefault()` and prevent focus from happening.
 *
 * Returns props to pass to the node we want to check for outside events.
 */
declare function usePointerDownOutside(onPointerDownOutsideProp?: (event: MouseEvent | TouchEvent) => void): {
    onMouseDownCapture: (event: React.MouseEvent<Element, MouseEvent>) => void;
    onTouchStartCapture: (event: React.TouchEvent<Element>) => void;
};
/**
 * Listens for when focus moves outside a react subtree.
 * Returns props to pass to the root (node) of the subtree we want to check.
 */
declare function useFocusOutside(onFocusOutside?: (event: React.FocusEvent) => void): {
    onBlurCapture: (event: React.FocusEvent) => void;
    onFocusCapture: () => void;
};
export const Root: typeof DismissableLayer;

//# sourceMappingURL=index.d.ts.map
