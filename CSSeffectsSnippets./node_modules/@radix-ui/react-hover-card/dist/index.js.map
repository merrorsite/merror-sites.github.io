{"mappings":"IAAgCA,2YAAAA,8CAClBA,EAAEC,WAAaD,EAAEE,QAAUF,EAWzC,SAASG,EAAuBC,EAAMC,GAcpC,OAbAC,OAAOC,KAAKF,GAAQG,SAAQ,SAASC,GACvB,YAARA,GAA6B,eAARA,GAIzBH,OAAOI,eAAeN,EAAMK,EAAK,CAC/BE,YAAY,EACZC,IAAK,WACH,OAAOP,EAAOI,SAKbL,ECZT,MASOS,EAAmBC,GAAuBC,EAT1B,aAqBjBC,EAA0CC,IAC9C,MAAMC,SACJA,EACAC,KAAMC,EAFFC,YAGJA,EAHIC,aAIJA,EAJIC,UAKJA,EAAY,IALRC,WAMJA,EAAa,KACXP,EACEQ,EAAeC,EAAMC,OAAO,GAC5BC,EAAgBF,EAAMC,OAAO,IAE5BR,GAAO,EAAOU,GAAWC,EAAqB,CACnDC,KAAMX,EACNY,YAAaX,EACbY,SAAUX,IAGNY,EAAaR,EAAMS,aAAY,KACnCC,aAAaR,EAAcS,SAC3BZ,EAAaY,QAAUC,OAAOC,YAAW,IAAMV,GAAQ,IAAON,KAC7D,CAACA,EAAWM,IAETW,EAAcd,EAAMS,aAAY,KACpCC,aAAaX,EAAaY,SAC1BT,EAAcS,QAAUC,OAAOC,YAAW,IAAMV,GAAQ,IAAQL,KAC/D,CAACA,EAAYK,IAUhB,OAPAH,EAAMe,WAAU,IACP,KACLL,aAAaX,EAAaY,SAC1BD,aAAaR,EAAcS,WAE5B,iBAGDK,EAAAC,cAACC,EAAD,CAAmBzB,KAAMA,EAAMG,aAAcO,EAASgB,OAAQX,EAAYY,QAASN,gBACjFE,EAAAC,cAACI,EAAgBC,KAAjB,KAAuB9B,yBAW7B,MACM+B,EAAsB,IAQtBC,eAAmBxB,EAAMyB,YAAW,CAAClC,EAAOmC,KAChD,MAAMC,GAAEA,EAAKJ,KAAwBK,GAAiBrC,EAChDsC,EAAUzC,EAXG,iCAanB,OACE4B,EAAAC,cAACI,EAAgBS,OAAjBC,EAAA,CACEC,aAAYH,EAAQpC,KAAO,OAAS,UAChCmC,EAFN,CAGED,GAAIA,EACJM,IAAKP,EACLQ,eAAgBC,EAAqB5C,EAAM2C,eAAgBE,EAAaP,EAAQV,SAChFkB,eAAgBF,EAAqB5C,EAAM8C,eAAgBD,EAAaP,EAAQT,2CAWtF,MAkBMkB,eAAmBtC,EAAMyB,YAAW,CAAClC,EAAOmC,KAChD,MAAMa,WAAEA,KAAeC,GAAiBjD,EAClCsC,EAAUzC,EApBG,iCAsBnB,OACE4B,EAAAC,cAACwB,EAAD,CAAUC,QAASH,GAAcV,EAAQpC,mBACvCuB,EAAAC,cAAC0B,EAADZ,EAAA,CACEC,aAAYH,EAAQpC,KAAO,OAAS,UAChC+C,EAFN,CAGEN,eAAgBC,EAAqB5C,EAAMqD,aAAcR,EAAaP,EAAQV,SAC9EkB,eAAgBF,EAAqB5C,EAAMsD,aAAcT,EAAaP,EAAQT,UAC9Ea,IAAKP,oCAuBb,MAAMoB,eAAuB9C,EAAMyB,YAAW,CAAClC,EAAOmC,KACpD,MAAMqB,UAAEA,GAAY,KAASP,GAAiBjD,EAExCyD,EAAgBD,EAAYE,EAASjD,EAAMkD,sBAEjD,OACElC,EAAAC,cAAC+B,EAAD,kBACEhC,EAAAC,cAACI,EAAgB8B,QAAjBpB,EAAA,GACMS,EADN,CAEEP,IAAKP,EACL0B,MAAO,IACFZ,EAAaY,MAEhBC,8CAAwD,+CAW5DC,EAAiBC,EAAgBC,EAAgBC,MAAO,CAAEC,YAAa,gCAI7E,SAAStB,EAAgBuB,GACvB,OAAQC,GACgB,UAAtBA,EAAMC,iBAA0BC,EAAYH,6BAGhD,MAAMrC,EAAOhC,iBACb,MAAMyE,EAAUvC,oBAChB,MAAM2B,EAAUb,oBAChB,MAAMmB,EAAQH","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/react/hover-card/src/HoverCard.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$reexport(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createContext } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport * as PopperPrimitive from '@radix-ui/react-popper';\nimport { Portal } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive, extendPrimitive } from '@radix-ui/react-primitive';\nimport type * as Polymorphic from '@radix-ui/react-polymorphic';\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCard\n * -----------------------------------------------------------------------------------------------*/\n\nconst HOVERCARD_NAME = 'HoverCard';\n\ntype HoverCardContextValue = {\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpen(): void;\n  onClose(): void;\n};\n\nconst [HoverCardProvider, useHoverCardContext] = createContext<HoverCardContextValue>(\n  HOVERCARD_NAME\n);\n\ntype HoverCardOwnProps = {\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  openDelay?: number;\n  closeDelay?: number;\n};\n\nconst HoverCard: React.FC<HoverCardOwnProps> = (props) => {\n  const {\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    openDelay = 700,\n    closeDelay = 300,\n  } = props;\n  const openTimerRef = React.useRef(0);\n  const closeTimerRef = React.useRef(0);\n\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  const handleOpen = React.useCallback(() => {\n    clearTimeout(closeTimerRef.current);\n    openTimerRef.current = window.setTimeout(() => setOpen(true), openDelay);\n  }, [openDelay, setOpen]);\n\n  const handleClose = React.useCallback(() => {\n    clearTimeout(openTimerRef.current);\n    closeTimerRef.current = window.setTimeout(() => setOpen(false), closeDelay);\n  }, [closeDelay, setOpen]);\n\n  // cleanup any queued state updates on unmount\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(openTimerRef.current);\n      clearTimeout(closeTimerRef.current);\n    };\n  }, []);\n\n  return (\n    <HoverCardProvider open={open} onOpenChange={setOpen} onOpen={handleOpen} onClose={handleClose}>\n      <PopperPrimitive.Root>{children}</PopperPrimitive.Root>\n    </HoverCardProvider>\n  );\n};\n\nHoverCard.displayName = HOVERCARD_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCardTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'HoverCardTrigger';\nconst TRIGGER_DEFAULT_TAG = 'a';\n\ntype HoverCardTriggerOwnProps = Polymorphic.OwnProps<typeof Primitive>;\ntype HoverCardTriggerPrimitive = Polymorphic.ForwardRefComponent<\n  typeof TRIGGER_DEFAULT_TAG,\n  HoverCardTriggerOwnProps\n>;\n\nconst HoverCardTrigger = React.forwardRef((props, forwardedRef) => {\n  const { as = TRIGGER_DEFAULT_TAG, ...triggerProps } = props;\n  const context = useHoverCardContext(TRIGGER_NAME);\n\n  return (\n    <PopperPrimitive.Anchor\n      data-state={context.open ? 'open' : 'closed'}\n      {...triggerProps}\n      as={as}\n      ref={forwardedRef}\n      onPointerEnter={composeEventHandlers(props.onPointerEnter, excludeTouch(context.onOpen))}\n      onPointerLeave={composeEventHandlers(props.onPointerLeave, excludeTouch(context.onClose))}\n    />\n  );\n}) as HoverCardTriggerPrimitive;\n\nHoverCardTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCardContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'HoverCardContent';\n\ntype HoverCardContentOwnProps = Polymorphic.Merge<\n  Polymorphic.OwnProps<typeof HoverCardContentImpl>,\n  {\n    /**\n     * Used to force mounting when more control is needed. Useful when\n     * controlling animation with React animation libraries.\n     */\n    forceMount?: true;\n  }\n>;\n\ntype HoverCardContentPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof HoverCardContentImpl>,\n  HoverCardContentOwnProps\n>;\n\nconst HoverCardContent = React.forwardRef((props, forwardedRef) => {\n  const { forceMount, ...contentProps } = props;\n  const context = useHoverCardContext(CONTENT_NAME);\n\n  return (\n    <Presence present={forceMount || context.open}>\n      <HoverCardContentImpl\n        data-state={context.open ? 'open' : 'closed'}\n        {...contentProps}\n        onPointerEnter={composeEventHandlers(props.onMouseEnter, excludeTouch(context.onOpen))}\n        onPointerLeave={composeEventHandlers(props.onMouseLeave, excludeTouch(context.onClose))}\n        ref={forwardedRef}\n      />\n    </Presence>\n  );\n}) as HoverCardContentPrimitive;\n\ntype PopperPrimitiveOwnProps = Polymorphic.OwnProps<typeof PopperPrimitive.Content>;\ntype HoverCardContentImplOwnProps = Polymorphic.Merge<\n  PopperPrimitiveOwnProps,\n  {\n    /**\n     * Whether the `HoverCard` should render in a `Portal`\n     * (default: `true`)\n     */\n    portalled?: boolean;\n  }\n>;\n\ntype HoverCardContentImplPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof PopperPrimitive.Content>,\n  HoverCardContentImplOwnProps\n>;\n\nconst HoverCardContentImpl = React.forwardRef((props, forwardedRef) => {\n  const { portalled = true, ...contentProps } = props;\n\n  const PortalWrapper = portalled ? Portal : React.Fragment;\n\n  return (\n    <PortalWrapper>\n      <PopperPrimitive.Content\n        {...contentProps}\n        ref={forwardedRef}\n        style={{\n          ...contentProps.style,\n          // re-namespace exposed content custom property\n          ['--radix-hover-card-content-transform-origin' as any]: 'var(--radix-popper-transform-origin)',\n        }}\n      />\n    </PortalWrapper>\n  );\n}) as HoverCardContentImplPrimitive;\n\nHoverCardContent.displayName = CONTENT_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst HoverCardArrow = extendPrimitive(PopperPrimitive.Arrow, { displayName: 'HoverCardArrow' });\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction excludeTouch<E>(eventHandler: () => void) {\n  return (event: React.PointerEvent<E>) =>\n    event.pointerType === 'touch' ? undefined : eventHandler();\n}\n\nconst Root = HoverCard;\nconst Trigger = HoverCardTrigger;\nconst Content = HoverCardContent;\nconst Arrow = HoverCardArrow;\n\nexport {\n  HoverCard,\n  HoverCardTrigger,\n  HoverCardContent,\n  HoverCardArrow,\n  //\n  Root,\n  Trigger,\n  Content,\n  Arrow,\n};\nexport type { HoverCardTriggerPrimitive, HoverCardContentPrimitive };\n"],"names":["a","__esModule","default","$parcel$exportWildcard","dest","source","Object","keys","forEach","key","defineProperty","enumerable","get","HoverCardProvider","useHoverCardContext","createContext","HoverCard","props","children","open","openProp","defaultOpen","onOpenChange","openDelay","closeDelay","openTimerRef","React","useRef","closeTimerRef","setOpen","useControllableState","prop","defaultProp","onChange","handleOpen","useCallback","clearTimeout","current","window","setTimeout","handleClose","useEffect","_react","createElement","$a9187305359b3319ee1ff04b4d7510$var$HoverCardProvider","onOpen","onClose","_radixUiReactPopper","Root","TRIGGER_DEFAULT_TAG","HoverCardTrigger","forwardRef","forwardedRef","as","triggerProps","context","Anchor","_babelRuntimeHelpersExtends","data-state","ref","onPointerEnter","composeEventHandlers","excludeTouch","onPointerLeave","HoverCardContent","forceMount","contentProps","Presence","present","$a9187305359b3319ee1ff04b4d7510$var$HoverCardContentImpl","onMouseEnter","onMouseLeave","HoverCardContentImpl","portalled","PortalWrapper","Portal","Fragment","Content","style","--radix-hover-card-content-transform-origin","HoverCardArrow","extendPrimitive","PopperPrimitive","Arrow","displayName","eventHandler","event","pointerType","undefined","Trigger"],"version":3,"file":"index.js.map"}