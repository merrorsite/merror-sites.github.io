import * as React from "react";
type FocusScopeProps = {
    children: (args: {
        ref: React.RefCallback<any>;
        tabIndex: number;
        onKeyDown: React.KeyboardEventHandler;
    }) => React.ReactElement;
    /**
     * Whether focus should be trapped within the FocusScope
     * (default: false)
     */
    trapped?: boolean;
    /**
     * Event handler called when auto-focusing on mount.
     * Can be prevented.
     */
    onMountAutoFocus?: (event: Event) => void;
    /**
     * Event handler called when auto-focusing on unmount.
     * Can be prevented.
     */
    onUnmountAutoFocus?: (event: Event) => void;
};
export function FocusScope(props: FocusScopeProps): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, any> | null) | (new (props: any) => React.Component<any, any, any>)>;
export const Root: typeof FocusScope;

//# sourceMappingURL=index.d.ts.map
